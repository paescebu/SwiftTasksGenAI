name: Package Update

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-package:
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Validate Set Up Swift/Xcode
        run: |
          swift --version
          xcodebuild -version 

      - name: Build package
        run: swift build --configuration release

      - name: Run UpdatePackage
        run: .build/release/UpdatePackage

      - name: Extract Version from Podfile.lock
        id: extract_version
        run: |
          PODFILE_LOCK="MediaPipeTasksGenAIC/Podfile.lock"
          VERSION=$(awk -F'[()]' '/MediaPipeTasksGenAI \(/ {print $2}' "$PODFILE_LOCK")
          TAG="${VERSION}"
          echo "Extracted Version: $VERSION"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: tag-check
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Stop if Tag Already Exists
        if: env.TAG_EXISTS == 'true'
        run: |
          echo "Tag $TAG already exists. Skipping update."
          exit 0
          
      - name: Commit and Push Changes
        if: env.TAG_EXISTS == 'false' && env.TAG != ''
        run: |
          git add .
          git commit -m "Auto-update package via GitHub Actions"
          git push

      - name: Tag Commit with Version and Release
        if: env.TAG_EXISTS == 'false' && env.TAG != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "$TAG"
          git push origin "$TAG"
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "Automated release for version $TAG." \
            
      - name: Upload zipped frameworks to Release
        if: env.TAG_EXISTS == 'false' && env.TAG != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$TAG" \
            ".Builds/MediaPipeTasksGenAIC.xcframework.zip" \
            ".Builds/MediaPipeTasksGenAI.xcframework.zip" \
            ".Builds/MediaPipeGenAICLibraries.xcframework.zip"
